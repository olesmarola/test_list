{"version":3,"sources":["api.js","List.js","ListsPage.js","constants.js","App.js","index.js"],"names":["BASE_URL","getTermsFromServer","a","async","fetch","response","json","getBrandTermsFromServer","getStylesFromServer","getSelectedParamsFromServer","data","URLSearchParams","toString","memo","list","prefix","defaultValue","history","useHistory","location","useLocation","onChange","e","id","params","pathname","slice","split","filter","param","startsWith","item","find","hasOwnProperty","every","some","map","slug","push","join","selectOption","target","value","key","label","useState","defaultValues","setDefaultValues","terms","setTerms","brandsTerms","setBrandsTerms","styles","setStyles","isLoading","setIsLoading","useEffect","Promise","all","termsFromServer","brandsTermsFromServer","stylesFromServer","loadListValues","currentUrl","message","forEach","length","service_slug","brand_slug","style_slug","getDefaultValues","service","brand","style","App","path","component","ListsPage","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2a041965.chunk.js","sourcesContent":["const BASE_URL = 'https://beta.autobooking.com/api/test/v1';\r\nconst TERMS = '/search/terms';\r\nconst BRAND_TERMS = '/search/brands_terms';\r\nconst STYLES = '/search/styles';\r\nconst SELECTED_PARAMS ='/search/parse_link';\r\n\r\nexport const getTermsFromServer = async() => {\r\n  const response = await fetch(BASE_URL + TERMS);\r\n\r\n  return response.json();\r\n};\r\nexport const getBrandTermsFromServer = async() => {\r\n  const response = await fetch(BASE_URL + BRAND_TERMS);\r\n\r\n  return response.json();\r\n};\r\nexport const getStylesFromServer = async() => {\r\n  const response = await fetch(BASE_URL + STYLES);\r\n\r\n  return response.json();\r\n};\r\n\r\nexport const getSelectedParamsFromServer = async(data) => {\r\n  const response = await fetch(BASE_URL + SELECTED_PARAMS + `?${new URLSearchParams(data).toString()}`);\r\n\r\n  return response.json();\r\n};\r\n\r\n","import React, {memo} from \"react\";\r\nimport {useHistory, useLocation} from \"react-router-dom\";\r\n\r\nconst List = ({list, prefix, defaultValue = -1}) => {\r\n  const history = useHistory();\r\n  const location = useLocation();\r\n\r\n  const selectOption = (list, id, prefix) => {\r\n    const currentUrl = location.pathname;\r\n    let params = currentUrl.slice(1).split('/');\r\n\r\n    if (+id === -1) {\r\n      params = params.filter(param => !param.startsWith(prefix));\r\n    } else {\r\n      const item = list.find(item => item.id === +id);\r\n\r\n      if (item.hasOwnProperty('slug')) {\r\n        if(params.every(param => param === '')) {\r\n          params = [];\r\n        }\r\n\r\n        if (params.some(param => param.startsWith(prefix))) {\r\n          params = params.map(param => {\r\n            if(param.startsWith(prefix)) {\r\n              return prefix + item.slug;\r\n            }\r\n\r\n            return param;\r\n          });\r\n        } else {\r\n          params.push(prefix + item.slug);\r\n        }\r\n      }\r\n    }\r\n\r\n    history.push({\r\n      pathname: `/${params.join('/')}`,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <select\r\n      onChange={(e) => selectOption(list, e.target.value, prefix)}\r\n      defaultValue={defaultValue}\r\n    >\r\n      <option value=\"-1\">{''}</option>\r\n      {list.map((item) => <option\r\n        value={item.id}\r\n        key={item.id}\r\n      >\r\n        {item.label}\r\n      </option>)}\r\n    </select>\r\n  );\r\n};\r\n\r\nexport default memo(List);\r\n","import React, {useState, useEffect, memo} from \"react\";\r\nimport {useLocation} from \"react-router-dom\";\r\nimport {getTermsFromServer, getBrandTermsFromServer, getStylesFromServer, getSelectedParamsFromServer} from \"./api\";\r\n\r\nimport List from \"./List\";\r\nimport {BRAND_TERM_PREFIX, STYLE_PREFIX, TERM_PREFIX} from \"./constants\";\r\n\r\nconst ListsPage = () => {\r\n  const [defaultValues, setDefaultValues] = useState(null);\r\n  const [terms, setTerms] = useState([]);\r\n  const [brandsTerms, setBrandsTerms] = useState([]);\r\n  const [styles, setStyles] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const location = useLocation();\r\n\r\n\r\n  const loadListValues = async () => {\r\n    const [\r\n      termsFromServer,\r\n      brandsTermsFromServer,\r\n      stylesFromServer,\r\n    ] = await Promise.all(\r\n      [\r\n        getTermsFromServer(),\r\n        getBrandTermsFromServer(),\r\n        getStylesFromServer(),\r\n        getSelectedParamsFromServer(),\r\n      ]\r\n    );\r\n\r\n    setTerms(termsFromServer.data);\r\n    setBrandsTerms(brandsTermsFromServer.data);\r\n    setStyles(stylesFromServer.data);\r\n    setIsLoading(false);\r\n  };\r\n\r\n  const getDefaultValues = async () => {\r\n    const currentUrl = location.pathname;\r\n    const message = {};\r\n\r\n    currentUrl.slice(1).split('/').forEach(item => {\r\n      if (item.slice(0, TERM_PREFIX.length) === TERM_PREFIX) {\r\n        message.service_slug = item.slice(TERM_PREFIX.length);\r\n      }\r\n\r\n      if (item.slice(0, BRAND_TERM_PREFIX.length) === BRAND_TERM_PREFIX) {\r\n        message.brand_slug = item.slice(BRAND_TERM_PREFIX.length);\r\n      }\r\n\r\n      if (item.slice(0, STYLE_PREFIX.length) === STYLE_PREFIX) {\r\n        message.style_slug = item.slice(STYLE_PREFIX.length);\r\n      }\r\n    });\r\n\r\n    setDefaultValues(await getSelectedParamsFromServer(message));\r\n  };\r\n\r\n  useEffect(() => {\r\n    loadListValues();\r\n    getDefaultValues();\r\n  }, []);\r\n\r\n  return isLoading\r\n    ? (\r\n      <span>Loading...</span>\r\n    )\r\n    : (\r\n      <>\r\n        <List list={terms} prefix={TERM_PREFIX}\r\n              defaultValue={defaultValues.service.hasOwnProperty('id') ? defaultValues.service.id : null}/>\r\n        <List list={brandsTerms} prefix={BRAND_TERM_PREFIX}\r\n              defaultValue={defaultValues.brand.hasOwnProperty('id') ? defaultValues.brand.id : null}/>\r\n        <List list={styles} prefix={STYLE_PREFIX}\r\n              defaultValue={defaultValues.style.hasOwnProperty('id') ? defaultValues.style.id : null}/>\r\n      </>\r\n    );\r\n};\r\n\r\nexport default memo(ListsPage);\r\n","export const TERM_PREFIX = 's-';\r\nexport const BRAND_TERM_PREFIX = 'b-';\r\nexport const STYLE_PREFIX = 'st-';\r\n","import React from 'react';\nimport { Route } from 'react-router-dom';\n\nimport ListsPage from \"./ListsPage\";\nimport './App.css';\n\nconst App = () => (\n  <Route path=\"/\" component={ListsPage}/>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from \"react-router-dom\";\nimport App from './App';\n\nReactDOM.render(\n  <HashRouter>\n    <App />\n  </HashRouter>\n  , document.getElementById('root'));\n"],"sourceRoot":""}