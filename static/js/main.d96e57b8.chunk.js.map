{"version":3,"sources":["api.js","List.js","constants.js","ListsPage.js","App.js","index.js"],"names":["BASE_URL","getTermsFromServer","a","async","fetch","response","json","getBrandTermsFromServer","getStylesFromServer","getSelectedParamsFromServer","List","list","param","prefix","history","useHistory","params","useParams","onChange","e","id","item","find","push","pathname","slug","brandTerm","style","term","selectOption","target","value","defaultValue","urlParam","replace","RegExp","setDefaultValue","map","key","label","ListsPage","useState","terms","setTerms","brandsTerms","setBrandsTerms","styles","setStyles","selectedParams","setSelectedParams","isLoading","setIsLoading","console","log","useEffect","Promise","all","termsFromServer","brandsTermsFromServer","stylesFromServer","selectedParamsFromServer","data","loadListValues","service","brand","App","path","component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d96e57b8.chunk.js","sourcesContent":["const BASE_URL = 'https://beta.autobooking.com/api/test/v1';\r\nconst TERMS = '/search/terms';\r\nconst BRAND_TERMS = '/search/brands_terms';\r\nconst STYLES = '/search/styles';\r\nconst SELECTED_PARAMS ='/search/parse_link';\r\n\r\nexport const getTermsFromServer = async() => {\r\n  const response = await fetch(BASE_URL + TERMS);\r\n\r\n  return response.json();\r\n};\r\nexport const getBrandTermsFromServer = async() => {\r\n  const response = await fetch(BASE_URL + BRAND_TERMS);\r\n\r\n  return response.json();\r\n};\r\nexport const getStylesFromServer = async() => {\r\n  const response = await fetch(BASE_URL + STYLES);\r\n\r\n  return response.json();\r\n};\r\n\r\nexport const getSelectedParamsFromServer = async() => {\r\n  const response = await fetch(BASE_URL + SELECTED_PARAMS);\r\n\r\n  return response.json();\r\n};\r\n\r\n","import React from \"react\";\r\nimport {useHistory, useParams} from \"react-router-dom\";\r\nimport {BRAND_TERM_PREFIX, STYLE_PREFIX, TERM_PREFIX} from \"./constants\";\r\n\r\nconst List = ({list, param, prefix}) => {\r\n  const history = useHistory();\r\n  const params = useParams();\r\n\r\n  const selectOption = (list, id, prefix) => {\r\n    const item = list.find(item => item.id === +id);\r\n\r\n    switch (prefix) {\r\n      case TERM_PREFIX:\r\n        history.push({\r\n          pathname: `/${item ? item.slug : 'empty'}/${params.brandTerm || 'empty'}/${params.style || 'empty'}`,\r\n        });\r\n        break;\r\n\r\n      case BRAND_TERM_PREFIX:\r\n        history.push({\r\n          pathname: `/${params.term || 'empty'}/${item ? item.slug : 'empty'}/${params.style || 'empty'}`,\r\n        });\r\n        break;\r\n\r\n      case STYLE_PREFIX:\r\n        history.push({\r\n          pathname: `/${params.term || 'empty'}/${params.brandTerm || 'empty'}/${item ? item.slug : 'empty'}`,\r\n        });\r\n        break;\r\n\r\n      default:\r\n        history.push({\r\n          pathname: `/${params.term || 'empty'}/${params.brandTerm || 'empty'}/${params.style || 'empty'}`,\r\n        });\r\n    }\r\n  };\r\n\r\n  const setDefaultValue = (list, urlParam, prefix) => {\r\n    if (!urlParam) {\r\n      return -1;\r\n    }\r\n\r\n    const value = list.find(item => item.slug === urlParam.replace(new RegExp(prefix), ''));\r\n\r\n    if (value) {\r\n      return value.id;\r\n    }\r\n\r\n    return -1;\r\n  };\r\n\r\n  return (\r\n    <select\r\n      onChange={(e) => selectOption(list, e.target.value, prefix)}\r\n      defaultValue={setDefaultValue(list, param, prefix)}\r\n    >\r\n      <option value=\"-1\">{''}</option>\r\n      {list.map((item) => <option\r\n        value={item.id}\r\n        key={item.id}\r\n      >\r\n        {item.label}\r\n      </option>)}\r\n    </select>\r\n  );\r\n};\r\n\r\nexport default List;\r\n","export const TERM_PREFIX = 's-';\r\nexport const BRAND_TERM_PREFIX = 'b-';\r\nexport const STYLE_PREFIX = 'st-';\r\n","import React, {useState, useEffect} from \"react\";\r\nimport {useParams} from \"react-router-dom\";\r\nimport {getTermsFromServer, getBrandTermsFromServer, getStylesFromServer, getSelectedParamsFromServer} from \"./api\";\r\n\r\nimport List from \"./List\";\r\nimport {BRAND_TERM_PREFIX, STYLE_PREFIX, TERM_PREFIX} from \"./constants\";\r\n\r\nconst ListsPage = () => {\r\n  const [terms, setTerms] = useState([]);\r\n  const [brandsTerms, setBrandsTerms] = useState([]);\r\n  const [styles, setStyles] = useState([]);\r\n  const [selectedParams, setSelectedParams] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const params = useParams();\r\n\r\n\r\n  const loadListValues = async () => {\r\n    const [\r\n      termsFromServer,\r\n      brandsTermsFromServer,\r\n      stylesFromServer,\r\n      selectedParamsFromServer,\r\n    ] = await Promise.all(\r\n      [\r\n        getTermsFromServer(),\r\n        getBrandTermsFromServer(),\r\n        getStylesFromServer(),\r\n        getSelectedParamsFromServer(),\r\n      ]\r\n    );\r\n\r\n    setTerms(termsFromServer.data);\r\n    setBrandsTerms(brandsTermsFromServer.data);\r\n    setStyles(stylesFromServer.data);\r\n    setSelectedParams(selectedParamsFromServer);\r\n    setIsLoading(false);\r\n  };\r\n  console.log(params)\r\n  useEffect(() => {\r\n    loadListValues();\r\n  }, []);\r\n\r\n  return isLoading\r\n    ? (\r\n      <span>Loading...</span>\r\n    )\r\n    : (\r\n      <>\r\n        <List list={terms} param={selectedParams.service.slug || params.term} prefix={TERM_PREFIX}/>\r\n        <List list={brandsTerms} param={selectedParams.brand.slug || params.brandTerm} prefix={BRAND_TERM_PREFIX}/>\r\n        <List list={styles} param={selectedParams.style.slug || params.style} prefix={STYLE_PREFIX}/>\r\n      </>\r\n    );\r\n};\r\n\r\nexport default ListsPage;\r\n","import React from 'react';\nimport { Route } from 'react-router-dom';\n\nimport ListsPage from \"./ListsPage\";\nimport './App.css';\n\nconst App = () => (\n  <Route path=\"/:term?/:brandTerm?/:style?\" component={ListsPage}/>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from \"react-router-dom\";\nimport App from './App';\n\nReactDOM.render(\n  <HashRouter>\n    <App />\n  </HashRouter>\n  , document.getElementById('root'));\n"],"sourceRoot":""}